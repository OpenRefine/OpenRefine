package com.google.gridworks.tests.rdf.exporters;

import static org.testng.Assert.assertTrue;

import org.json.JSONObject;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;
import static org.testng.Assert.*;

import com.google.gridworks.browsing.Engine;
import com.google.gridworks.expr.ExpressionUtils;
import com.google.gridworks.gel.ControlFunctionRegistry;
import com.google.gridworks.model.Cell;
import com.google.gridworks.model.Column;
import com.google.gridworks.model.Project;
import com.google.gridworks.model.Row;
import com.google.gridworks.rdf.RdfSchema;
import com.google.gridworks.rdf.exporters.RdfExporter;
import com.google.gridworks.rdf.expr.RdfBinder;
import com.google.gridworks.rdf.expr.functions.strings.Urlify;
import com.google.gridworks.util.ParsingUtilities;
import com.hp.hpl.jena.rdf.model.Model;
import com.hp.hpl.jena.rdf.model.ModelFactory;
import com.hp.hpl.jena.rdf.model.Property;
import com.hp.hpl.jena.rdf.model.Resource;
import com.hp.hpl.jena.vocabulary.RDF;
import com.hp.hpl.jena.vocabulary.RDFS;

public class RdfExporterFacultyDataTest {

	Project project;
	Engine engine;
	RdfExporter exporter;
	Model model;
	
	Model expected;
	@BeforeClass
	public void init()throws Exception{
		expected = buildExpectedModel();
		
		buildTheSampleProject();
		engine = new Engine(project);
		exporter = new RdfExporterMock("RDF/XML");
		ControlFunctionRegistry.registerFunction("urlify", new Urlify());
		ExpressionUtils.registerBinder(new RdfBinder());
			    
		model = exporter.buildModel(project, engine);
		
		assertEquals(project.rows.size(),3);
		assertEquals(project.columnModel.getColumnIndexByName("Advisor"),5);
		
		Row row = project.rows.get(0);
		assertEquals(row.cells.get(5).value,"");
		row = project.rows.get(1);
		assertEquals(row.cells.get(5).value,"Tim Finin");
		row = project.rows.get(2);
		assertEquals(row.cells.get(5).value,"Anupam Joshi");
	}
	
	@Test
	public void testModel(){
		assertTrue(expected.isIsomorphicWith(model));
	}
	
	Model buildExpectedModel(){
		//see test2.xlsx and rdfschema2.png
		
		Model model = ModelFactory.createDefaultModel();
		
		//create persons 
		Resource person1 = addFoafPerson(model, "http://lab.linkeddata.deri.ie/test#tim-finin", "Tim Finin", "finin@umbc.edu");
		Resource person2 = addFoafPerson(model, "http://lab.linkeddata.deri.ie/test#lushan-han", "Lushan Han", "lushan@umbc.edu");
		Resource person3 = addFoafPerson(model, "http://lab.linkeddata.deri.ie/test#wenjia-li", "Wenjia Li", "wenjia@umbc.edu");
		
		//office numbers
		Property officeNumberProp = model.createProperty("http://lab.linkeddata.deri.ie/test#officeNumber");
		person1.addProperty(officeNumberProp, model.createTypedLiteral(329));
		person2.addProperty(officeNumberProp, model.createTypedLiteral(377));
		person3.addProperty(officeNumberProp, model.createTypedLiteral(377));
		
		//advisor
		Resource advisor = model.createResource("http://lab.linkeddata.deri.ie/test#anupam-joshi");
		advisor.addProperty(model.createProperty("http://xmlns.com/foaf/0.1/name"), "Anupam Joshi");
		Resource advisorType = model.createResource("http://lab.linkeddata.deri.ie/test#Advisor");
		advisor.addProperty(RDF.type, advisorType);
		person1.addProperty(RDF.type, advisorType);
		
		//university
		Resource university = model.createResource("http://example.org/UMBC");
		university.addProperty(RDF.type, model.createResource("http://xmlns.com/foaf/0.1/Organization"));
		university.addProperty(RDFS.label,model.createLiteral("University of Maryland Baltimore County","en"));
		
		Property memberProp = model.createProperty("http://xmlns.com/foaf/0.1/member");
		person1.addProperty(memberProp, university);
		person2.addProperty(memberProp, university);
		person3.addProperty(memberProp, university);
		
		//add advisor
		Property advisorProp = model.createProperty("http://lab.linkeddata.deri.ie/test#advisor");
		person2.addProperty(advisorProp, person1);
		person3.addProperty(advisorProp, advisor);
		
		return model;
	}

	void buildColumnModel()throws Exception{
		project.columnModel.addColumn(0, new Column(0,"Name"), true);
		project.columnModel.addColumn(1, new Column(1,"Email"), true);
		project.columnModel.addColumn(2, new Column(2,"Office"), true);
		project.columnModel.addColumn(3, new Column(3,"Faculty"), true);
		project.columnModel.addColumn(4, new Column(4,"Coffee Due"), true);
		project.columnModel.addColumn(5, new Column(5,"Advisor"), true);
	}
	
	void buildTheSampleProject()throws Exception{
		project = new Project();
		buildColumnModel();
		Row row1= new Row(6);
		row1.cells.add(new Cell("Tim Finin",null));
		row1.cells.add(new Cell("finin@umbc.edu",null));
		row1.cells.add(new Cell("329",null));
		row1.cells.add(new Cell("Yes",null));
		row1.cells.add(new Cell("$10",null));
		row1.cells.add(new Cell("",null));
		project.rows.add(row1);
		
		Row row2= new Row(6);
		row2.cells.add(new Cell("Lushan Han",null));
		row2.cells.add(new Cell("lushan@umbc.edu",null));
		row2.cells.add(new Cell("377",null));
		row2.cells.add(new Cell("No",null));
		row2.cells.add(new Cell("",null));
		row2.cells.add(new Cell("Tim Finin",null));
		project.rows.add(row2);
		
		Row row3= new Row(6);
		row3.cells.add(new Cell("Wenjia Li",null));
		row3.cells.add(new Cell("wenjia@umbc.edu",null));
		row3.cells.add(new Cell("377",null));
		row3.cells.add(new Cell("No",null));
		row3.cells.add(new Cell("",null));
		row3.cells.add(new Cell("Anupam Joshi",null));
		project.rows.add(row3);
		
		project.update();
		//set model
		project.overlayModels.put("rdfSchema", getRdfSchema() );
	}
	
	RdfSchema getRdfSchema()throws Exception{
		String json = "{\"baseUri\":\"http://lab.linkeddata.deri.ie/test#\",\"rootNodes\":[{\"nodeType\":\"cell-as-resource\",\"isRowNumberCell\":false,\"uriExpression\":\"value.urlify()\",\"columnName\":\"Name\",\"rdfTypes\":[{\"uri\":\"http://xmlns.com/foaf/0.1/Person\",\"curie\":\"foaf:Person\"}],\"links\":[{\"uri\":\"http://xmlns.com/foaf/0.1/name\",\"curie\":\"foaf:name\",\"target\":{\"nodeType\":\"cell-as-literal\",\"isRowNumberCell\":false,\"columnName\":\"Name\"}},{\"uri\":\"http://xmlns.com/foaf/0.1/mbox\",\"curie\":\"foaf:mbox\",\"target\":{\"nodeType\":\"cell-as-resource\",\"isRowNumberCell\":false,\"uriExpression\":\"'mailto:' + value\",\"rdfTypes\":[],\"columnName\":\"Email\",\"links\":[]}},{\"uri\":\"officeNumber\",\"curie\":\":officeNumber\",\"target\":{\"nodeType\":\"cell-as-literal\",\"isRowNumberCell\":false,\"valueType\":\"http://www.w3.org/2001/XMLSchema#int\",\"columnName\":\"Office\"}},{\"uri\":\"http://xmlns.com/foaf/0.1/member\",\"curie\":\"foaf:member\",\"target\":{\"nodeType\":\"resource\",\"value\":\"http://example.org/UMBC\",\"rdfTypes\":[{\"uri\":\"http://xmlns.com/foaf/0.1/Organization\",\"curie\":\"foaf:Organization\"}],\"links\":[{\"uri\":\"http://www.w3.org/2000/01/rdf-schema#label\",\"curie\":\"rdfs:label\",\"target\":{\"nodeType\":\"literal\",\"value\":\"University of Maryland Baltimore County\",\"lang\":\"en\"}}]}},{\"uri\":\"advisor\",\"curie\":\":advisor\",\"target\":{\"nodeType\":\"cell-as-resource\",\"isRowNumberCell\":false,\"uriExpression\":\"value.urlify()\",\"columnName\":\"Advisor\",\"rdfTypes\":[{\"uri\":\"Advisor\",\"curie\":\":Advisor\"}],\"links\":[{\"uri\":\"http://xmlns.com/foaf/0.1/name\",\"curie\":\"foaf:name\",\"target\":{\"nodeType\":\"cell-as-literal\",\"isRowNumberCell\":false,\"columnName\":\"Advisor\"}}]}}]}]}";
		JSONObject o = ParsingUtilities.evaluateJsonStringToObject(json);
		return RdfSchema.reconstruct(o);
	}
	
	private Resource addFoafPerson(Model model,String uri,String name,String email){
		Resource person = model.createResource(uri);
		person.addProperty(RDF.type, model.createResource("http://xmlns.com/foaf/0.1/Person"));
		person.addProperty(model.createProperty("http://xmlns.com/foaf/0.1/name"), name);
		person.addProperty(model.createProperty("http://xmlns.com/foaf/0.1/mbox"), model.createResource("mailto:" + email));
		
		return person;
	}
}
