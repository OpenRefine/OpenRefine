

# Functions
# 1. Arrays
arr_args_to_array=Retorna todos los argumentos que se le pasaron como un arreglo
arr_in_array=Retorna verdadero si el arreglo contiene la cadena de caracteres deseada, de lo contrario retorna falso. No convertir\u00E1 tipos de datos.
arr_join=Une los \u00EDtems en el arreglo con sep y lo retorna todo como una cadena de caracteres.
arr_reverse=Invierte el arreglo a.
arr_sort=Ordena el arreglo en orden ascendente. El ordenamiento es sensible a may\u00FAsculas y min\u00FAsculas, primero may\u00FAsculas y luego min\u00FAsculas.
arr_uniques=Retorna el arreglo con los duplicados eliminados. Sensible a may\u00FAsculas y min\u00FAsculas.
bool_or=Usa el operador l\u00F3gico O en dos o m\u00E1s booleanos para retornar un booleano. Por ejemplo, (1<3).o(1>7) retorna verdadero porque al menos una de las condiciones (la primera) es verdadera.
bool_not=Usa el operador l\u00F3gico NO en un booleano para retornar un booleano. Por ejemplo, no(1>7) retorna verdadero porque 1>7 en s\u00ED mismo es falso.

# 2. Booleans
bool_and=Usa el operador l\u00F3gico Y en dos o m\u00E1s booleanos para retornar un booleano. Eval\u00FAa declaraciones m\u00FAltiples en booleanos, luego retorna verdadero si todas las declaraciones son verdaderas. Por ejemplo, (1<3).y(1<0) retorna falso porque una condici\u00F3n es verdadera y la otra es falsa.
bool_xor=Utiliza el operador l\u00F3gico XO (o exclusivo) en dos o m\u00E1s booleanos para retornar un booleano. Eval\u00FAa m\u00FAltiples declaraciones, luego retorna verdadero si solo una de ellas es verdadera. Por ejemplo, (1<3).xo(1<7) retorna falso porque m\u00E1s de una de las condiciones es verdadera.
math_abs=Devuelve el valor absoluto de un n\u00FAmero.
math_atan=Devuelve la tangente del arco de un \u00E1ngulo en el rango de -\u03C0/2 a \u03C0/2.
arr_zip=Combina dos o m\u00E1s matrices en una \u00FAnica matriz, donde los elementos con el mismo \u00EDndice de las matrices de entrada se agrupan para formar una submatriz en la matriz de salida.
date_part=Devuelve parte de una fecha. El tipo de datos devuelto depende de la unidad. Consulte https://openrefine.org/docs/manual/grelfunctions/#datepartd-s-timeunit, https://openrefine.org/docs/manual/grelfunctions#date-functions para obtener una tabla.
date_now=Devuelve la hora actual seg\u00FAn el reloj de su sistema, en el formato extendido ISO 8601 (convertido a UTC). Por ejemplo, las 10:53 a. m. (y 00 segundos) del 26 de noviembre de 2020 en EST devuelve [fecha 2020-11-26T15:53:00Z].
html_inner_html=Devuelve el HTML interno de un elemento HTML. Esto incluir\u00E1 texto y elementos secundarios dentro del elemento seleccionado. \u00DAselo junto con parseHtml() y select() para proporcionar un elemento.
math_acos=Devuelve el arcocoseno de un \u00E1ngulo, en el rango de 0 a \u03C0.
math_ceil=Devuelve un n\u00FAmero entero redondeado al n\u00FAmero entero m\u00E1s cercano.
date_inc=Devuelve una fecha modificada en la cantidad indicada en la unidad de tiempo indicada, entre comillas. Consulte https://openrefine.org/docs/manual/grelfunctions/#incd-ns-timeunit para ver una tabla. La unidad predeterminada es "hora". Un valor positivo aumenta la fecha y un valor negativo la retrocede en el tiempo.
html_parse_html=Dada una celda llena de texto con formato HTML, parseHtml() simplifica las etiquetas HTML (por ejemplo, eliminando '' /'' al final de las etiquetas de cierre autom\u00E1tico), cierra las etiquetas que no est\u00E9n cerradas e inserta saltos de l\u00EDnea y sangr\u00EDas para que el c\u00F3digo est\u00E9 m\u00E1s limpio. Una celda no puede almacenar la salida de parseHtml() a menos que la convierta con toString(): por ejemplo, value.parseHtml().toString().
math_asin=Devuelve el arcoseno de un \u00E1ngulo en el rango de -\u03C0/2 a \u03C0/2.
math_atan2=Convierte coordenadas rectangulares (n1, n2) a polares (r, theta). Devuelve el n\u00FAmero theta (\u03B8).
