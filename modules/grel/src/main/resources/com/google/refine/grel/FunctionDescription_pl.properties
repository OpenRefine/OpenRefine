

# Functions
# 1. Arrays
arr_args_to_array=Zwraca wszystkie argumenty przekazane do niego jako tablic\u0119
arr_in_array=Zwraca warto\u015B\u0107 true, je\u015Bli tablica zawiera \u017C\u0105dany ci\u0105g, a false w przeciwnym razie. Nie konwertuje typ\u00F3w danych.
math_mod=Zwraca n1 modulus n2.
str_parse_json=Parsuje ci\u0105g jako JSON.
arr_reverse=Odwraca tablic\u0119 a.
arr_sort=Sortuje tablic\u0119 rosn\u0105co. Sortowanie uzwgl\u0119dnia wielkie i ma\u0142e litery, litery wielkie s\u0105 brane pod uwag\u0119 w pierwszej kolejno\u015Bci.
bool_not=Neguje warto\u015B\u0107 logiczn\u0105 (operator logiczny NOT), zwracaj\u0105c warto\u015B\u0107 logiczn\u0105. Przyk\u0142ad: NOT(1 > 7) zwraca warto\u015B\u0107 true, poniewa\u017C stwierdzenie 1 > 7 jest fa\u0142szywe.
arr_join=\u0141\u0105czy elementy wektora separatorem (sep) i zwraca je jako ci\u0105g znak\u00F3w.
arr_uniques=Zwraca tablic\u0119 po usuni\u0119ciu duplikat\u00F3w. Rozr\u00F3\u017Cnia wielkie i ma\u0142e litery.
bool_or=Aplikuje operator alternatywy (OR) na co najmniej dw\u00F3ch warto\u015Bciach logicznych. Przyk\u0142ad: (1 < 3) OR (1 > 7) zwraca warto\u015B\u0107 true, poniewa\u017C co najmniej jedno ze stwierdze\u0144 jest prawdziwe.

# 2. Booleans
bool_and=Aplikuje operator koniunkcji (AND) na co najmniej dw\u00F3ch warto\u015Bciach logicznych. Warto\u015Bciuje wiele stwierdze\u0144 i zwraca warto\u015B\u0107 true je\u017Celi wszystkie stwierdzenia s\u0105 prawdziwe. Przyk\u0142ad: (1 < 3) AND (1 < 0) zwraca false, poniewa\u017C jedno ze stwierdze\u0144 jest prawdziwe a drugie fa\u0142szywe.
